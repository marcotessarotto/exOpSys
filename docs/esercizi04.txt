***D01***
(simile a esercizio C06, che però usa un file in formato testo)
è dato un file che contiene un array di int, in formato binario.

scrivere un programma che effettua il sort crescente dell'array di int contenuto nel file e che poi prosegue così:

versione A: il file originale viene modificato con l'array di int ordinato
[soluzione: https://moodle2.units.it/mod/resource/view.php?id=226625]

versione B: il file originale non viene modificato e l'array di int ordinato viene scritto in un nuovo file


***D02***
N = 10

il programma crea N threads; esiste un contatore condiviso tra thread.

ogni thread scrive un messaggio del tipo: "thread numero %d, contatore = %d\n" dove il primo numero è un id passato come parametro al thread (id compreso tra 0 a N-1); 
ogni thread incrementa il contatore.

gli N thread arrivano ad un "tornello"; quando tutti gli N thread sono arrivati li, allora possono proseguire. 
Ciascun thread prosegue scrivendo il messaggio "thread numero %d - fine\n".
[soluzione: https://moodle2.units.it/mod/resource/view.php?id=226629]

***D03***
processo padre registra un signal handler per SIGCHLD e poi va in pausa.
processo padre crea un processo figlio; il processo figlio scrive un messaggio qualsiasi su stdout e termina.
il processo padre riceve il segnale SIGCHLD, ottiene il valore di stato del processo figlio e poi termina.


***D04***
(versione rivista dell'esercizio C07)
scrivere il seguente programma:

processo padre crea un file, sovrascrivendo il contenuto (lo apre per leggere e scrivere)
crea un processo figlio; processo padre e processo figlio condividono:
- un mutex "mtx" (realizzato con un semaforo, con o senza nome, scegliete voi);
- un semaforo "sem"
- una variabile condivisa "var_cond": int var_cond;

il processo figlio cicla N volte (N = 1000):    numeri interi (uno per riga) ed ottiene i numeri interi da rand(), usando seed=1000:
- "chiude" il mutex "mtx"
- scrive un numero casuale ottenuto con rand() in var_cond
- "libera" il mutex "mtx"
- incrementa il semaforo "sem"
// - dorme 10 millisecondi

poi il processo figlio termina.


il processo padre itera all'infinito:
- decrementa il "sem"
- "chiude" il mutex "mtx"
- legge il valore di var_cond e lo scrive su stdout
- "libera" il mutex "mtx"

il processo padre registra un signal handler per SIGCHLD;
quando il processo figlio termina, il kernel invia un segnale SIGCHLD al processo padre, che a sua volta termina.


***D05***
è uno sviluppo dell'esercizio B7 che riporto di seguito:

  ***esercizio B7  'ricerca in file con più processi'  ***
  Il programma prende tre parametri: un nome di file, un numero intero > 0 (M), una stringa di caratteri S da cercare nel file
  All’interno di un file passato come argomento al programma, questo crea M processi
  Ciascun processo cerca nel pezzo di file assegnato la stringa S (se la trova, scrive a video l’offset della stringa nel file)
  Ciascun processo opera su un pezzo del file di dimensione pari a file_size/M + K (con K >=0 tale che se la stringa S è a cavallo di due pezzi contigui, S venga trovata)

AGGIUNTA:
- i risultati trovati da ciascun processo figlio vengono "raccolti" dal processo padre


***D06***
il programma crea un thread "lavoratore" che effettua il seguente:

ciclo:
- il thread si mette in attesa;
- il thread principale "fornisce" il "materiale" su cui il thread lavorerà una volta svegliato;
- il thread viene svegliato ed inizia a lavorare sul "materiale";
- il thread produce il risultato e lo "restituisce";
- il thread torna a "dormire";
[soluzione: https://moodle2.units.it/mod/resource/view.php?id=227179]


***D07***
processo padre, processo figlio
il processo figlio conta il numero di righe nel file /usr/share/dict/american-english
il processo figlio scrive il risultato in una memory map condivisa con il processo padre.
il processo figlio termina.
il processo padre legge il risultato dalla memory map condivisa, lo scrive su stdout e poi termina.


***D08***
due contatori condivisi tra processi:
cont1 e cont2

processo padre crea 2 processi figli.
ogni processo figlio fa questo per N (= 100000):
- incrementa cont1; 
- se cont1 % 10 == 0 (cioè se cont1 è divisibile per 10), allora incrementa cont2

l'accesso ai due contatore deve essere regolato da un mutex (implementato con semaforo).


***D09***
il processo padre crea 10 processi figli; il processo figlio i-mo calcola fibonacci(i) per conto suo.
viene usata una unica memoria condivisa tra tutti i processi, per consentire ai processi figli di restituire i 10 valori.

il processo padre scrive su stdout i valori di fibonacci restituiti dai processi figli:
fibonacci(0)
fibonacci(1)
...
fibonacci(9)


***D10***
il processo padre crea 10 processi figli; il processo figlio i-mo calcola fibonacci(i) ma i valori di fibonacci(i-1) e fibonacci(i-2) li
ottiene dai processi figli (i-1) e (i-2), ovvero deve attendere che questi processi producano i valori di fibonacci corrispondenti,
prima di poter svolgere il suo calcolo.

viene usata una unica memoria condivisa tra tutti i processi, per consentire ai processi figli di restituire i 10 valori.

il processo padre scrive su stdout i valori di fibonacci restituiti dai processi figli:
fibonacci(0)
fibonacci(1)
...
fibonacci(9)


